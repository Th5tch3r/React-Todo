{"version":3,"sources":["components/TodoComponents/Todo.js","components/TodoComponents/TodoList.js","components/TodoComponents/TodoForm.js","App.js","index.js"],"names":["Todo","props","react_default","a","createElement","className","concat","task","completed","onClick","toggleTask","id","TodoList","map","TodoComponents_Todo","key","clearCompleted","TodoForm","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChanges","e","setState","taskName","target","value","console","log","state","handleSubmit","addTask","onSubmit","type","name","onChange","React","Component","data","App","preventDefault","filter","item","length","newTask","Date","now","toConsumableArray","taskId","objectSpread","TodoComponents_TodoForm","TodoComponents_TodoList","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.1c3290f7.chunk.js","sourcesContent":["import React from \"react\";\nimport { className } from \"postcss-selector-parser\";\n\nconst Todo = props => {\n    return (\n        <div\n            className={`task${props.task.completed ? \" completed \" : \"\"}`}\n            onClick={() => {\n                props.toggleTask(props.task.id)\n            }}\n        >\n            <p>{props.task.task}</p>\n        </div>\n    );\n};\n\nexport default Todo;","// your components will all go in this `component` directory.\n// feel free to change this component.js into TodoList.js\n import React from \"react\";\n\n import Todo from './Todo';\n\n const TodoList = props => {\n\n     return(\n         <div className=\"todo-list\">\n             {props.task.map(task => (\n                 <Todo key={task.id} task={task} toggleTask={props.toggleTask}/>\n             ))}\n             <button className=\"clear-btn\" onClick={props.clearCompleted}>\n                 Clear Completed\n             </button>\n\n         </div>\n     );\n };\n\n export default TodoList;","import React from \"react\";\n\nclass TodoForm extends React.Component{\n    constructor() {\n        super();\n        this.state ={\n            taskName: \"\"\n        }\n    }\n    \n    handleChanges = e => {\n        this.setState({ taskName: e.target.value});\n        console.log(this.state.taskName);\n    };\n\n    handleSubmit = e => {\n        this.props.addTask(e, this.state.taskName);\n        this.setState({ taskName: \"\"});\n    };\n\n    render(){\n        return (\n            <form onSubmit={this.handleSubmit}>\n                <input \n                    type=\"text\"\n                    name=\"item\"\n                    value={this.state.taskName}\n                    onChange={this.handleChanges}\n                />\n                <button>Add</button>\n            </form>\n        )\n    }\n}\n\nexport default TodoForm;","import React from 'react';\nimport reactDOM from \"react-dom\";\n\nimport TodoList from './components/TodoComponents/TodoList';\nimport TodoForm from './components/TodoComponents/TodoForm';\nimport \"./components/TodoComponents/Todo.css\";\n\nconst data = [\n  {\n    task: 'Organize Garage',\n    id: 1528817077286,\n    completed: false\n  },\n  {\n    task: 'Bake Cookies',\n    id: 1528817084358,\n    completed: false\n  }\n];\n\nclass App extends React.Component {\n  // you will need a place to store your state in this component.\n  // design `App` to be the parent component of your application.\n  // this component is going to take care of state, and any change handlers you need to work with your state\n  \n  constructor() {\n    super();\n    this.state = {\n      data\n    };\n  }\n\n  addTask = (e, taskName) => {\n    e.preventDefault();\n    const existing = this.state.data.filter(\n      item => item.task === taskName\n    );\n    if (existing.length === 0) {\n      const newTask = {\n        task: taskName,\n        id: Date.now(),\n        completed: false\n      };\n      this.setState({\n        data: [...this.state.data, newTask]\n      });\n    }\n  }\n\n  clearCompleted = e => {\n    e.preventDefault();\n    this.setState({\n      data: this.state.data.filter(task => !task.completed)\n    })\n  }\n\n  toggleTask = taskId => {\n    this.setState({\n      data: this.state.data.map(task => {\n        if (task.id === taskId) {\n          return { ...task, completed: !task.completed};\n        }\n        return task;\n      })\n    })\n  }\n  \n  render() {\n    console.log(\"rendering...\");\n    return (\n      <div className=\"App\">\n        <div className=\"header\">\n        <h2 >My Checklist!</h2>\n        <TodoForm  addTask={this.addTask} />\n        </div>\n        <TodoList\n          task={this.state.data}\n          toggleTask={this.toggleTask}\n          clearCompleted={this.clearCompleted}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport { render } from 'react-dom';\nimport App from './App';\n\nrender(<App />, document.getElementById('root'));\n"],"sourceRoot":""}